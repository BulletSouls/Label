using System.Data.OleDb;
using System.Drawing;


		OleDbConnection konekcija;
        OleDbCommand komanda;
        OleDbDataReader rider;
        Bitmap DrawArea;
        Bitmap DrawAreaMap;
		
	//relative paths of base linking
	            
			string putanja = Environment.CurrentDirectory;
            string[] putanjaBaze = putanja.Split(new string[] { "bin" }, StringSplitOptions.None);
            AppDomain.CurrentDomain.SetData("DataDirectory", putanjaBaze[0]);
            konekcija = new OleDbConnection(@"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=|DataDirectory|\B10Antikviteti.mdb");
            DrawArea = new Bitmap(pictureBox1.Size.Width, pictureBox1.Size.Height);
       
	//loading the main form
	
			Graphics g;
            g = Graphics.FromImage(DrawArea);
            Pen olovka = new Pen(Color.Navy, 2);
            g.DrawRectangle(olovka, 2, 2, pictureBox1.Width - 4, pictureBox1.Height - 4);
            g.DrawLine(olovka, (pictureBox1.Width) / 2 + 2, 2, (pictureBox1.Width) / 2 + 2, pictureBox1.Height - 2);
            g.DrawLine(olovka, 2, (pictureBox1.Height) / 2 + 2, pictureBox1.Width - 2, (pictureBox1.Height) / 2 + 2);
            pictureBox1.InitialImage = DrawArea;
            DrawAreaMap = DrawArea;
            pictureBox1.Image = pictureBox1.InitialImage;
            g.Dispose();
	
	//view database data
			
			int id = 0;
            bool ima = false;
            try
            {
                id = Convert.ToInt32(textBox1.Text);
            }
            catch
            {
                MessageBox.Show("Polje sifra ne sme biti prazno i mora biti broj!");
                textBox1.Text = "";
            }
            if(id<=0)
            {
                MessageBox.Show("Sifra mora biti veca od 0!");
                textBox1.Text = "";
            }
            komanda = new OleDbCommand("Select ArheologID from Arheolog", konekcija);
            konekcija.Open();
            rider = komanda.ExecuteReader();
            while(rider.Read())
            {
                if(id== Convert.ToInt32(rider[0].ToString()))
                {
                    ima = true;
                    break;
                }
            }
            konekcija.Close();

            if(ima)
            {
                dataGridView1.Rows.Clear();
                int[] lokaliteti = new int[30];
                komanda = new OleDbCommand("Select LokalitetID from Antikvitet where ArheologID=" + id, konekcija);
                konekcija.Open();
                rider = komanda.ExecuteReader();
                int i = 0;
                if(rider.HasRows)
                {
                    while(rider.Read())
                    {
                        lokaliteti[i] = Convert.ToInt32(rider[0].ToString());
                        i++;
                    }
                }
                else
                {
                    MessageBox.Show("Arheolog sa ovom sifrom nije pronasao nijedan antikvitet!");
                }
                i = 0;
                konekcija.Close();
                
                OleDbCommand komandaP;
                komandaP = new OleDbCommand("Select * from Lokalitet", konekcija);
                konekcija.Open();
                OleDbDataReader riderPrikaz;
                riderPrikaz = komandaP.ExecuteReader();
                while(riderPrikaz.Read())
                {
                    for(int j=0;j<lokaliteti.Count(); j++)
                    {
                        if(Convert.ToInt32(riderPrikaz[0].ToString())== lokaliteti[j])
                        {
                            DataGridViewRow red = (DataGridViewRow)dataGridView1.Rows[i].Clone();
                            red.Cells[0].Value = riderPrikaz[3].ToString();
                            red.Cells[1].Value = riderPrikaz[1].ToString();
                            red.Cells[2].Value = riderPrikaz[2].ToString();
                            dataGridView1.Rows.Add(red);
                            i++;
                        }
                    }
                }
                konekcija.Close();
            }
            else
            {
                MessageBox.Show("Arheolog sa ovom sifrom ne postoji!");
            }
	
	//drawing data from listview
			
			DrawArea = null;
            DrawArea = new Bitmap(pictureBox1.Size.Width, pictureBox1.Size.Height);

            Graphics g;
            g = Graphics.FromImage(DrawArea);
            float sirina=0, duzina=0;
            float centarX = (float)((pictureBox1.Width / 2)-0.5);
            float centarY= (float)((pictureBox1.Height/2)-0.5);
            int rbr=0;
            try
            {
                rbr = dataGridView1.SelectedCells[0].RowIndex;
            }
            catch
            {
                MessageBox.Show("Morate selektovati red!");
            }
            if(!dataGridView1.Rows[rbr].IsNewRow)
            {
                duzina = centarX + float.Parse(dataGridView1.Rows[rbr].Cells[1].Value.ToString());
                sirina = centarY - float.Parse(dataGridView1.Rows[rbr].Cells[2].Value.ToString());
            }
            else
            {
                MessageBox.Show("Selektovani red ne sme biti prazan!");
            }

            Pen olovka = new Pen(Color.Navy, 2);
            g.DrawRectangle(olovka, 2, 2, pictureBox1.Width - 4, pictureBox1.Height - 4);
            g.DrawLine(olovka, (pictureBox1.Width) / 2 + 2, 2, (pictureBox1.Width) / 2 + 2, pictureBox1.Height - 2);
            g.DrawLine(olovka, 2, (pictureBox1.Height) / 2 + 2, pictureBox1.Width - 2, (pictureBox1.Height) / 2 + 2);
            pictureBox1.Image = DrawArea;

            olovka = new Pen(Color.Red, 4);
            g.DrawEllipse(olovka, duzina, sirina, 4, 4);
            pictureBox1.Image = DrawArea;
            g.Dispose();

		
